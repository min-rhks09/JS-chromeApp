1209 바닐라.js
- 모멘텀 클론코딩
    - 로그인, 시계, 위치, 날씨, 로그인유지(세션), 무작위 명언, 무작위 배경화면, todolist 등

- 시작
 - 크로미움 기반 브라우저에서 개발자도구(또는 검사)를 통해 console에 접근할 수 있음(간단한 코드작성시 유용) 
 - html은 css,js파일을 가져와서 브라우저에서 열도록 도와준다


#2.0
console 창에서 실행(js코드 수정가능)
html에서 불러와서 실행(css, js 등)

#2.1
기본적 데이터 타입
number: integer float 등 
text: text  string 등 

#2.2
js 파일에서 console.log(출력내용)로 출력
변수(variable)
 - const를 사용 하여 변수를 지정할 수 있음
 - 변수는 camelCase 형식으로 작성
 - 재할당, 재선언 불가

#2.3
또 다른 변수 지정법
let
 - const와의 차이점: const는 상수(값 변화 불가)
 - 같은 변수 명에서 let을 주지 않고 변수 명만 입력하여 변경가능
    ex) let a = 1 ------> a = 2 와 같은 코드 작성 가능
    js 파일은 위에서부터 읽어 내려가느 특징을 이용 한 것
 - const: 계속 준다, let: 한 번만 준다
 - 재선언 불가 , 재할당 가능

var
 - 옛날에 사용하던 변수 지정 방식
 - 재선언, 재할당 가능 
 - 실수로 값을  재선언 시 오류를 발견하기 힘듦

#2.4
- boolean: true or false 
- null: 값이 없음
- undefined: 값이 정의되지 않음

#2.5
array
 - 기본적인 데이터 구조
 ex) 요일을 그룹화하기 []를 사용
    const week = ["mon", "tue", "wed", "thu", "fri", "sat"];
    (= 리스트)

 - array에서 원하는 값 찾기
 ex)week array에서 monday 찾기 -> console.log(week[0]); -> []안의 값은 키값(키값은 0번째 부터 존재)

 -array에 새로운 값 추가
    -push 사용
    ex)week array에 "sun" 추가 -> week.push("sun");

#2.6
object(property를 가진 데이터 저장 구조)
 - {}를 사용하여 작성
 ex)player의 정보를 담기
 const player={
     name: "mk",
     age: 26,
     point:100
 }
 - name만 출력 -> console.log(player.name); or console.log(player["name"])
 - point 변경 -> const player 아래 player.point = 200;
    -object안의 값을 변경하는 거라 const 안에서 에러없이 작동
 ex)object안에 값 추가, lastName 추가하기
    player.lastName = "park";

#2.7 ~ #2.8
function
(): 함수의 실행버튼과 같은 역할 
ex) 이름 앞에 Hello를 붙여주는 함수를 작성하라, 뒤에는 나이 표시
    function sayHello(nameOfPerson, age){
        console.log(" hello " + nameOfPerson + " and your age is " + age);
    }
    sayHello("mk", "26");

ex) player object 작성 후 출력해보기
    const player={
        name: "mk", 
        sayHello: function(otherPersonName){
            console.log("Hello" + otherPersonName)
        },
    };
    player.sayHello("min");

#2.9
- string: "" or ''
- number: integer, float 
- const, let, var(사용 지양)
- array: []

#2.10
- object: 변수 선언후 내용 작성 
    ex) const player{
        name: "mk",
        age: 26
    };
    - 내용 업데이트 가능: console.log((player.name = "pmk"));
                또는  player.name = "pmk" 와 같이 작성해도 출력시 업데이트 된 내용으로 출력
                js는 코드를 위에서부터 읽어내려오는 특징 때문이다.
    - 내용 추가하기: ex) player.like = "coffee";
- 위와 같은 object는 console의 형태와 같은 형태를 가지고 있음

-function: 코드를 캡슐화하여 반복적으로 사용하게 함
    - 예제 풀이(object와 function 조합)
    const calculator = {
    add: function(a, b){
        console.log(a + b);
    },
    minus: function(a, b){
        console.log(a - b);
    },
    times: function(a, b){
        console.log(a * b);
    },
    divide: function(a, b){
        console.log(a / b);
    },
    power: function(a, b){
        console.log(a ** b);
    },
    };

    calculator.add(1, 2);

    calculator.minus(3, 2);

    calculator.times(5, 3);

    calculator.divide(2, 2);

    calculator.power(2, 2);

#2.11
- return의 사용
- 한국나이 계산기
const age = 27

function ageCalculator(yourAge){
        return yourAge + 2;
};

const korAge =  ageCalculator(age);

#2.12
- return

#2.13 
- 조건문
 - 나이 계산기(성인판단)
    - prompt: 사용자에게 창을 띄워줌 (message, default), css적용불가, js실행을 일시정지 시켜  현재는 잘사용하지않음
    - typeof를 사용하여 console에서 확인
    - 입력받은 값의 type 변경하기(parseInt를 사용 -> string을 number로 변환
    - parseInt를 사용하여 사용자가 숫자를 입력했는지 감지

    - 계산기의 나이 입력부분
     const age = parseInt(prompt("당신의 나이를 입력하세요"));

#2.14
    - 나이 입력부분에서 값이 NaN으로 나왔을 때 판별하기(isNaN 사용)
        - isNaN 사용시 true or false로 반환 (boolean값 반환)
    - if, else
        - if(t or f 로 판단이 가능한 조건){
            참 값일 때 
        }else{
            다른 값일 때 
        }
    
    - 나이를 올바로 입력했는지 확인하기(if문 사용)
        - if(isNaN(age)){
            console.log("숫자로 다시 입력해주세요.");
          }else{
            console.log("당신의 나이가 입력되었습니다.");
          };

#2.15
- 다중 조건문 실행(else if 사용)
//type1
if(isNaN(age)){
    console.log("숫자로 다시 입력해주세요.");
}else{
    if(age > 50){
        alert("음주를 줄일 연령대 입니다.");
    }else if(age < 20){
        alert("음주 노노");
    }else{
        alert("음주 가능하나 조금만요.");
    };
};

//type2
if(isNaN(age) || age < 0){
    //숫자로 입력하지 않거나 음수를 입력하는 경우 실행
    //||: or 연산자, (a || b --> a와 b 중 어느하나라도 참일 시 실행)
    alert("올바른 나이로 다시 입력해주세요.");
}else if(age < 20){
    alert("음주 불가한 나이에요.");
}else if(age >= 20 && age <= 50){
    //&&: and 연산자, (a && b --> a와 b 조건이 모드 만족할 시 실행)
    
    alert("음주 가능한 나이에요");
}else if(age > 50){
    alert("음주 가능하나 조금만요.");
};

#2.16
if(isNaN(age) || age < 0){
    //숫자로 입력하지 않거나 음수를 입력하는 경우 실행
    //||: or 연산자, (a || b --> a와 b 중 어느하나라도 참일 시 실행)
    alert("올바른 나이로 다시 입력해주세요.");
}else if(age < 20){
    alert("음주 불가한 나이에요.");
}else if(age >= 20 && age <= 50){
    //&&: and 연산자, (a && b --> a와 b 조건이 모드 만족할 시 실행)
    
    alert("음주 가능한 나이에요");
}
//100살일 경우
else if(age === 100){
    alert("good!!")
}
// age === 100을 age > 50보다 밑에서 실행하면 실행되지 않기 때문에 위치를 옮겨줌(js는 위에서 아래로 차례로 실행)
else if(age > 50){
    alert("음주 가능하나 조금만요.");
};

- ===: equal, !==: not 

- 연산순서
    ex) if((a && b) || (c && d)){}--> 1.(c && d) 2.(a && b) 3. (a && b) || (c && d) 

#3.0
js와 html 작동방식
 - 서로 연결되어있음, js 코드로 html 항목을 살펴볼 수 있음
 - console에서 document를 통해서 접근할

#3.1
- js에선 html의 object를 살펴볼 수 있음
- document.getElementById로 지정한 id를 불러올 수 있음
- 불러오기와 변경을 할 수 있는 것이 중요

#3.2
- id, className

- getElementByclassName: array 형태로 가져옴
- getElementByTagName: className과 마찬가지
- querySelector: elements를 css 방식으로 검색, 중복될 떄에는 첫번째 검색 결과만 가져옴
- querySelectorAll을 이용하여 모든 검색결과를 가져올 수 있음
    - id로 검색시에도 활용가능( ex) document.querySelector("#id"); ) # == id를 의미
    - querySelector 활용내용 알아두기
- console.dir 

#3.3
- event: js는 event를 listen 할 수 있음
const title = document.querySelector("div.hello:first-child h1");

// console.dir(title);

// title.style.color = "blue";

//title 클릭시 listen, console에 count
function handleTitleClick(){
    console.log("타이틀이 클릭되었습니다");
};

title.addEventListener("click", handleTitleClick);

#3.4
-listen하고 싶은 event 찾기
 - element name 검색(google, MDN활용)
 - console.dir을 통해 사용가능한 event 검색

//마우스 커서가 위에 위치할 때 listen(mouseenter 사용)
function handleMouseEnter(){
    console.log("커서가 위에 위치해있습니다!");
};

title.addEventListener("mouseenter", handleMouseEnter);

//마우스 커서가 떠날 떄 listen(mouseleave 사용)
function handleMouseLeave(){
    console.log("커서 위치가 텍스트에서 떠났습니다!");
};

title.addEventListener("mouseleave", handleMouseLeave);

//click, mouseenter, mouseleave를 HTML상에 나타나게 하기(innerText 사용)
function handleTitleClick(){
    title.style.color = "red";
};

function handleMouseEnter(){
    title.innerText = "커서가 위에 위치해있습니다!";
};

function handleMouseLeave(){
    title.innerText ="커서 위치가 텍스트에서 떠났습니다!";
};

title.addEventListener("click", handleTitleClick);
title.addEventListener("mouseenter", handleMouseEnter);
title.addEventListener("mouseleave", handleMouseLeave);

#3.5
- event listening
 1. addEventListener
    ex) title.addEventListener("click", handleTitleClick);
 2. oneventname
    ex) title.onclick = handleTitleClick;

- 아래에서 가가 두개의 양식은 같은 결과를 출력
title.addEventListener("click", handleTitleClick);
// title.onclick = "handleTitleClick";

title.addEventListener("mouseenter", handleMouseEnter);
// title.onmouseenter = "handleMouseEnter";

title.addEventListener("mouseleave", handleMouseLeave);
// title.onmouseleave = "handleMouseLeave";

- 다른 event 활용해보기
//resize event 사용하기(feat.window)
function handleWindowResize(){
    document.body.style.backgroundColor = "tomato";
};

window.addEventListener("resize", handleWindowResize);

//copy event 사용하기
function handleWindowCopy(){
    alert("복사됨!");
};

window.addEventListener("copy", handleWindowCopy);

//wifi offline, online 표시 event 활용

function handleWindowOffline(){
    //wifi 해제 및 미연결시 나타남
    alert("오프라인 상태입니다");
};
window.addEventListener("offline", handleWindowOffline);

function handleWindowOnline(){
    //wifi 연결시 나타남
    alert("온라인 상태입니다");
}
window.addEventListener("online", handleWindowOnline);

#3.6
//click 할 때마다 색이 변하게 하기(if-else문 활용)
const h1 = document.querySelector("div.hello:first-child h1");

function handleTitleClick(){
    const h1Color =h1.style.color;

    let newColor; //값이 바뀌어야 하기 때문에 let으로 선언
    
    if(h1Color === "blue"){
        newColor = "green"
    }else{
        newColor = "blue"
    };
    h1.style.color = newColor; //h1Color에 영향을 미치게하기
};

h1.addEventListener("click", handleTitleClick);

//js 작동 기본 element찾기 -- event listen -- event반응

#3.7
- CSS 활용하기
<JS>
//click 할 때마다 색이 변하게 하기(css 추가)
const h1 = document.querySelector("div.hello:first-child h1");

function handleTitleClick(){
    const changeClass = "change"; //변수선언으로 오류 조기발견 및 줄이기 
    if(h1.className === changeClass){
        h1.className = ""
    }else{
        h1.className = changeClass
    };
};

h1.addEventListener("click", handleTitleClick);

<CSS>
h1 {
    color: blue;
    transition: color 0.5s ease-in-out; /* 색상변황 딜레이 주기 */    
}

.change {
    color: green;
}

#3.8
- classList: class들의 목록으로 작업 할 수 있도록 해줌
const h1 = document.querySelector("div.hello:first-child h1");

function handleTitleClick(){
    const changeClass = "change"; //변수선언으로 오류 조기발견 및 줄이기 

    //add, remove로 원래있던 class(h1font)는 남기고 js에서 새롭게 작성한 class만 적용이 됨
    if(h1.classList.contains(changeClass)){
        h1.classList.remove(changeClass);
    }else{
        h1.classList.add(changeClass);
    };
};

h1.addEventListener("click", handleTitleClick);

//toggle을 이용하여 add, remove 대체하기
const h1 = document.querySelector("div.hello:first-child h1");
function handleTitleClick(){
    h1.classList.toggle("change");
};

h1.addEventListener("click", handleTitleClick);

#4.0
- value 기억시키기
- HTML
    <div id="login_form"> <!-- class="login_form" 으로도 사용 가능 -> Cannot read properties of null (reading 'addEventListener')에러발생 class와 id의 차이 알기  -->
        <input type="text" placeholder="내용을 입력하세요" />
        <button>login</button>
    </div>

-JS
 const loginForm = document.getElementById("login_form");
 const loginInput = loginForm.querySelector("input");
 const loginButton = loginForm.querySelector("button");

//위의 코드를 더욱 간단히
const loginInput = document.querySelector("#login_form input");
const loginButton = document.querySelector("#login_form button");

function handleLoginButtonClick(){
    console.log(loginInput.value)
    
    //console.log(loginInput.value) //input창에 입력내용 콘솔에 출력
    //console.log("btnclick"); //버튼 클릭시 콘솔에 출력
};

loginButton.addEventListener("click", handleLoginButtonClick);


#4.1
-html
    <!-- form을 사용하여 html에서 글자수 제한문 만들기 -->
    <form id="login_form">
        <input required maxlength="15" type="text" placeholder="이름을 입력하세요" />
        <button>login</button>
    </form>
    <!-- 현재 form이 submit 되어 텍스트 입력시 버튼또는 엔터 입력시 새로고침되는 문제  -->

-js
const loginInput = document.querySelector("#login_form input");
const loginButton = document.querySelector("#login_form button");

function handleLoginButtonClick(){
    const username = loginInput.value;
    console.log(username);
};

loginButton.addEventListener("click", handleLoginButtonClick);

- 유효성 검사
 - 텍스트가 비어있거나 너무 길 경우 버튼 클릭 안되도록 설정

#4.2
const loginForm = document.querySelector("#login_form");
const loginInput = document.querySelector("#login_form input");

function onLoginSubmit(event){
    event.preventDefault();
    //preventDefault를 이용하여 브라우저가 기본동작을 실행하지 못하도록 막을 수 있음
    console.log(loginInput.value);
    //event를 console.log하여 인자들(?)을 확인 할 수있다.
};

loginForm.addEventListener("submit", onLoginSubmit);

#4.3 
-링크이동 막아보기
-html
<a href="https://www.naver.com/">Go!</a>
-js
const link = document.querySelector("a");
function handleLinkClick(event){
    event.preventDefault();
    console.log(event); //console에서는 pointer event가 실행되었다고 알려줌
    alert("clicked"); //alert가 페이지 이동을 막고있음(알림창 확인 후 페이지 이동)
}
link.addEventListener("click", handleLinkClick);

#4.4
-loginButton 클릭시 form이 사라지게하기
-html
  <h1 id="greeting" class="hidden"></h1>

-css
.hidden {
    display: none; 
    /* 이 css 클래스는 화면상에 보이지 않도록 숨기는 역할을 한다 */
}

-js
const loginForm = document.querySelector("#login_form");
const loginInput = document.querySelector("#login_form input");
const greeting = document.querySelector("#greeting");
const HIDDEN_CLASSNAME = "hidden"; //string만 포함된 변수는 대문자로 표기하고 string을 저장하는 역할을 수행

function onLoginSubmit(event){
    event.preventDefault();
    //preventDefault를 이용하여 브라우저가 기본동작을 실행하지 못하도록 막을 수 있음
    const username = loginInput.value;
    loginForm.classList.add(HIDDEN_CLASSNAME);
    console.log(username);
    greeting.innerText = "Hi, " + username;
    greeting.innerText = `Hi, ${username}`; //윗줄 코드와 똑같이 실행
    greeting.classList.remove(HIDDEN_CLASSNAME);
};

loginForm.addEventListener("submit", onLoginSubmit);

#4.5
-local storage 활용하기
    -browser console에서 localstorage.setItem 실행 후 localstorage의 DB에 새 항목(username)이 생성됨
    -getItem, removeItem 등 다양한 기능이 있음

-js
function onLoginSubmit(event){
    const username = loginInput.value;
    localStorage.setItem("username", username); //localstorage의 DB에 username을 저장해주는 기능
};

#4.6
-localStorage에 username이 있는지 확인
console.log(usernameData);
const loginForm = document.querySelector("#login_form");
const loginInput = document.querySelector("#login_form input");
const greeting = document.querySelector("#greeting");
const HIDDEN_CLASSNAME = "hidden"; //string만 포함된 변수는 대문자로 표기하고 string을 저장하는 역할을 수행
const USERNAME_KEY = "username";

function onLoginSubmit(event){
    event.preventDefault();
    //preventDefault를 이용하여 브라우저가 기본동작을 실행하지 못하도록 막을 수 있음
    const username = loginInput.value;
    localStorage.setItem(USERNAME_KEY, username); //localstorage의 DB에 username을 저장해주는 기능
    loginForm.classList.add(HIDDEN_CLASSNAME);
    console.log(username);
    //greeting.innerText = "Hi, " + username;
    paintGreetings(usernameData);
};

function paintGreetings(username){
    greeting.innerText = `Hi, ${username}`;
    greeting.classList.remove(HIDDEN_CLASSNAME);
};

const usernameData = localStorage.getItem(USERNAME_KEY);

if(usernameData === null){
    //form을 보여주기
    loginForm.classList.remove(HIDDEN_CLASSNAME);
    loginForm.addEventListener("submit", onLoginSubmit);
}else{
    //greeting 보여주기
    paintGreetings(usernameData);   
};

#4.7
const loginForm = document.querySelector("#login_form");
const loginInput = document.querySelector("#login_form input");
const greeting = document.querySelector("#greeting");

const HIDDEN_CLASSNAME = "hidden"; //string만 포함된 변수는 대문자로 표기하고 string을 저장하는 역할을 수행
const USERNAME_KEY = "username";

function onLoginSubmit(event){
    event.preventDefault();
    //preventDefault를 이용하여 브라우저가 기본동작을 실행하지 못하도록 막을 수 있음
    loginForm.classList.add(HIDDEN_CLASSNAME);
    localStorage.setItem(USERNAME_KEY, username); //localstorage의 DB에 username을 저장해주는 기능
    //greeting.innerText = "Hi, " + username;
    paintGreetings();
};

function paintGreetings(){
    greeting.innerText = `Hi, ${username}`;
    greeting.classList.remove(HIDDEN_CLASSNAME);
};

const usernameData = localStorage.getItem(USERNAME_KEY);

if(usernameData === null){
    //form을 보여주기
    loginForm.classList.remove(HIDDEN_CLASSNAME);
    loginForm.addEventListener("submit", onLoginSubmit);
}else{
    //greeting 보여주기
    paintGreetings();   
};

#5.0
- setInterval 함수 사용
function sayHello(){
    console.log("hello");
};
setInterval(sayHello, 5000); //(호출할 함수, 호출 간격 ms (sayHello함수를 5초마다 실행))

#5.1
- setTimeout
setTimeout(sayHello, 5000) //setInterval함수와 같은형태

- 시계
const clock = document.querySelector("#clock");

function myClock(){
    const date = new Date();
    clock.innerText = `${date.getHours()}:${date.getMinutes()}:${always00()}`;
};

myClock(); //페이지 새로고침시 시계가 즉시 실행이 되도록 한다. 이후 setInterval 함수에 의해 1초마다 실행
setInterval(myClock, 1000); 

#5.2
- String(),padStart(),setInterval() 사용방법 알기
- 시계의 모든 부분 두자리수로 만들기, padStart 함수활용
-padStart
    - 설정한 문자열의길이보다 짧으면 앞부분에 padding을 준다.
    - ex) "1".padStart(2, "0") => "01" 출력, 문자열의 길이가 2보다 짧을 때 문자 앞에 "0"을 추가해줌

#5.3
const clock = document.querySelector("#clock");

function myClock(){
    const date = new Date();
    //const hours = date.getHours(); --> number로 출력이 되기떄문에 string으로 변환 필요
    const hours = String(date.getHours()).padStart(2,"0");
    const minutes = String(date.getMinutes()).padStart(2,"0");
    const seconds = String(date.getSeconds()).padStart(2,"0");
    clock.innerText = `${hours}:${minutes}:${seconds}`;
};

myClock(); //페이지 새로고침시 시계가 즉시 실행이 되도록 한다. 이후 setInterval 함수에 의해 1초마다 실행
setInterval(myClock, 1000); 

#6.0
- 명언 띄우기 
- Math.random: 임의의 숫자 제공(0~1 사이) 
- round: 반올림, ceil:올림, floor: 내림

#6.1
- 배경화면 출력하기

#6.2
- array에서 랜덤하게 출력하기(Math.random이용)

#7.0

#7.1
-todolist create

#7.2
- todolist delete
- event.target.parentElement
    -button 클릭 -> event생성 -> target을 button -> button은 부모(li)가 있음(parentElement로 접근)
    -li.remove()로 li 제거 

#7.3 todolist save
- localStorage 안에선 array의 형태로 저장불가(text로만 저장) 
    - JSON.stringify()를 이용하여 string 형태로 변환 가능

#7.4
- localStorage 항목 새로고침시 화면에 유지 되도록 하기
JSON.parse() --> stiring을 array 형태로 출력해줌

-forEach

-arrow function

#7.5
- todo 항목 삭제시 localStorage에서는 지워지지 않는 문제

- todo 항목에서 동일한 항목(=중목항목)을 지울 때 어떤 항목이 지워졌는지 확인할 수 없는 문제
    -Date.now()를 통해 랜덤 ID를 제공하여 해결

#7.6
- object를 생성하여 항목에 각각 id 부여

#7.7
- filter 함수 활용
    - array에서 filter 활용 시 false로 출력하면 빈 array를 출력함
    ex) array에서 1000보다 큰 숫자 제외 시키기
    const numarr = [1234, 3333, 34, 544, 122, 9000]
    function myFilter(num){return num <= 1000}

#7.8
- filter를 이용해 todos 삭제 구현

- parseInt

#8.0
- 현위치 날씨 정보를 구현하기 위해 함수를 이용 위도, 경도 불러오기와

#8.1 
- API이용히여 날씨 정보 불러오기
https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}

- fetch()
