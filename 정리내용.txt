1209 바닐라.js
- 모멘텀 클론코딩
    - 로그인, 시계, 위치, 날씨, 로그인유지(세션), 무작위 명언, 무작위 배경화면, todolist 등

- 시작
 - 크로미움 기반 브라우저에서 개발자도구(또는 검사)를 통해 console에 접근할 수 있음(간단한 코드작성시 유용) 
 - html은 css,js파일을 가져와서 브라우저에서 열도록 도와준다


#2.0
console 창에서 실행(js코드 수정가능)
html에서 불러와서 실행(css, js 등)

#2.1
기본적 데이터 타입
number: integer float 등 
text: text  string 등 

#2.2
js 파일에서 console.log(출력내용)로 출력
변수(variable)
 - const를 사용 하여 변수를 지정할 수 있음
 - 변수는 camelCase 형식으로 작성
 - 재할당, 재선언 불가

#2.3
또 다른 변수 지정법
let
 - const와의 차이점: const는 상수(값 변화 불가)
 - 같은 변수 명에서 let을 주지 않고 변수 명만 입력하여 변경가능
    ex) let a = 1 ------> a = 2 와 같은 코드 작성 가능
    js 파일은 위에서부터 읽어 내려가느 특징을 이용 한 것
 - const: 계속 준다, let: 한 번만 준다
 - 재선언 불가 , 재할당 가능

var
 - 옛날에 사용하던 변수 지정 방식
 - 재선언, 재할당 가능 
 - 실수로 값을  재선언 시 오류를 발견하기 힘듦

#2.4
- boolean: true or false 
- null: 값이 없음
- undefined: 값이 정의되지 않음

#2.5
array
 - 기본적인 데이터 구조
 ex) 요일을 그룹화하기 []를 사용
    const week = ["mon", "tue", "wed", "thu", "fri", "sat"];
    (= 리스트)

 - array에서 원하는 값 찾기
 ex)week array에서 monday 찾기 -> console.log(week[0]); -> []안의 값은 키값(키값은 0번째 부터 존재)

 -array에 새로운 값 추가
    -push 사용
    ex)week array에 "sun" 추가 -> week.push("sun");

#2.6
object(property를 가진 데이터 저장 구조)
 - {}를 사용하여 작성
 ex)player의 정보를 담기
 const player={
     name: "mk",
     age: 26,
     point:100
 }
 - name만 출력 -> console.log(player.name); or console.log(player["name"])
 - point 변경 -> const player 아래 player.point = 200;
    -object안의 값을 변경하는 거라 const 안에서 에러없이 작동
 ex)object안에 값 추가, lastName 추가하기
    player.lastName = "park";

#2.7 ~ #2.8
function
(): 함수의 실행버튼과 같은 역할 
ex) 이름 앞에 Hello를 붙여주는 함수를 작성하라, 뒤에는 나이 표시
    function sayHello(nameOfPerson, age){
        console.log(" hello " + nameOfPerson + " and your age is " + age);
    }
    sayHello("mk", "26");

ex) player object 작성 후 출력해보기
    const player={
        name: "mk", 
        sayHello: function(otherPersonName){
            console.log("Hello" + otherPersonName)
        },
    };
    player.sayHello("min");

#2.9
- string: "" or ''
- number: integer, float 
- const, let, var(사용 지양)
- array: []

#2.10
- object: 변수 선언후 내용 작성 
    ex) const player{
        name: "mk",
        age: 26
    };
    - 내용 업데이트 가능: console.log((player.name = "pmk"));
                또는  player.name = "pmk" 와 같이 작성해도 출력시 업데이트 된 내용으로 출력
                js는 코드를 위에서부터 읽어내려오는 특징 때문이다.
    - 내용 추가하기: ex) player.like = "coffee";
- 위와 같은 object는 console의 형태와 같은 형태를 가지고 있음

-function: 코드를 캡슐화하여 반복적으로 사용하게 함
    - 예제 풀이(object와 function 조합)
    const calculator = {
    add: function(a, b){
        console.log(a + b);
    },
    minus: function(a, b){
        console.log(a - b);
    },
    times: function(a, b){
        console.log(a * b);
    },
    divide: function(a, b){
        console.log(a / b);
    },
    power: function(a, b){
        console.log(a ** b);
    },
    };

    calculator.add(1, 2);

    calculator.minus(3, 2);

    calculator.times(5, 3);

    calculator.divide(2, 2);

    calculator.power(2, 2);

#2.11
- return의 사용
- 한국나이 계산기
const age = 27

function ageCalculator(yourAge){
        return yourAge + 2;
};

const korAge =  ageCalculator(age);

#2.12
- return

#2.13 
- 조건문
 - 나이 계산기(성인판단)
    - prompt: 사용자에게 창을 띄워줌 (message, default), css적용불가, js실행을 일시정지 시켜  현재는 잘사용하지않음
    - typeof를 사용하여 console에서 확인
    - 입력받은 값의 type 변경하기(parseInt를 사용 -> string을 number로 변환
    - parseInt를 사용하여 사용자가 숫자를 입력했는지 감지

    - 계산기의 나이 입력부분
     const age = parseInt(prompt("당신의 나이를 입력하세요"));

#2.14
    - 나이 입력부분에서 값이 NaN으로 나왔을 때 판별하기(isNaN 사용)
        - isNaN 사용시 true or false로 반환 (boolean값 반환)
    - if, else
        - if(t or f 로 판단이 가능한 조건){
            참 값일 때 
        }else{
            다른 값일 때 
        }
    
    - 나이를 올바로 입력했는지 확인하기(if문 사용)
        - if(isNaN(age)){
            console.log("숫자로 다시 입력해주세요.");
          }else{
            console.log("당신의 나이가 입력되었습니다.");
          };

#2.15
- 다중 조건문 실행(else if 사용)
//type1
if(isNaN(age)){
    console.log("숫자로 다시 입력해주세요.");
}else{
    if(age > 50){
        alert("음주를 줄일 연령대 입니다.");
    }else if(age < 20){
        alert("음주 노노");
    }else{
        alert("음주 가능하나 조금만요.");
    };
};

//type2
if(isNaN(age) || age < 0){
    //숫자로 입력하지 않거나 음수를 입력하는 경우 실행
    //||: or 연산자, (a || b --> a와 b 중 어느하나라도 참일 시 실행)
    alert("올바른 나이로 다시 입력해주세요.");
}else if(age < 20){
    alert("음주 불가한 나이에요.");
}else if(age >= 20 && age <= 50){
    //&&: and 연산자, (a && b --> a와 b 조건이 모드 만족할 시 실행)
    
    alert("음주 가능한 나이에요");
}else if(age > 50){
    alert("음주 가능하나 조금만요.");
};

#2.16
if(isNaN(age) || age < 0){
    //숫자로 입력하지 않거나 음수를 입력하는 경우 실행
    //||: or 연산자, (a || b --> a와 b 중 어느하나라도 참일 시 실행)
    alert("올바른 나이로 다시 입력해주세요.");
}else if(age < 20){
    alert("음주 불가한 나이에요.");
}else if(age >= 20 && age <= 50){
    //&&: and 연산자, (a && b --> a와 b 조건이 모드 만족할 시 실행)
    
    alert("음주 가능한 나이에요");
}
//100살일 경우
else if(age === 100){
    alert("good!!")
}
// age === 100을 age > 50보다 밑에서 실행하면 실행되지 않기 때문에 위치를 옮겨줌(js는 위에서 아래로 차례로 실행)
else if(age > 50){
    alert("음주 가능하나 조금만요.");
};

- ===: equal, !==: not 

- 연산순서
    ex) if((a && b) || (c && d)){}--> 1.(c && d) 2.(a && b) 3. (a && b) || (c && d) 




